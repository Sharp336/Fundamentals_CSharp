CLR — общеязыковая среда выполнения .NET. Она обеспечивает:
управление памятью, 
безопасность выполнения, 
само выполнение, 
обработку исключений 
и поддержку многопоточности. 
Также она обеспечивает кроссплатформенность.

+---------------------------+
|    Написание кода         |
|   (C#, VB.NET, F#)        |
+-----------+---------------+
            |
            v
+---------------------------+
|      Компиляция           |
| (исходный код -> CIL)     |
+-----------+---------------+
            |
            v
+---------------------------+
|  Загрузка и  проверка кода|
+-----------+---------------+
            |
            v
+---------------------------+
|      JIT-компиляция       |
| (CIL -> машинный код)     |
+-----------+---------------+
            |
            v
+-------------------------------+
|        Выполнение             |
|  (машинный код процессором)   |
|+ услуги CLR (GC, безопасность)|
+-------------------------------+

|----------------------------------------------------------------------------------------|

Common Language Infrastructure (CLI)
CLI — открытая спецификация, определяющая исполняемую среду, используемую для разработки и выполнения приложений на различных платформах. 
Включает в себя спецификации CIL, CTS и другие компоненты, необходимые для создания кроссплатформенных приложений.

Common Type System (CTS)
CTS — система типов, обеспечивающая совместимость типов данных и операций над ними между языками, поддерживаемыми .NET. 

Common Intermediate Language (CIL / MSIL)
CIL — промежуточный язык в который компилируется исходный код .NET. 
CIL представляет собой набор инструкций, которые затем компилируются JIT-компилятором в машинный код, специфичный для данной платформы (разных архитектур процессоров). 

Common Language Specification (CLS)
CLS — набор правил и ограничений, которому должны соответствовать все языки .NET для обеспечения их взаимной совместимости. 
Она определяет подмножество функциональных возможностей CTS, которое должно поддерживаться всеми .NET совместимыми языками.

Base Class Library (BCL)
BCL — библиотека базовых классов, предоставляющая фундаментальные функциональные возможности для всех .NET-приложений. 
Включает в себя классы для выполнения операций ввода-вывода, работы с файлами, строками, коллекциями и другими основными задачами.

Framework Class Library (FCL)
FCL — широкая библиотека, включающая в себя BCL и дополнительные библиотеки для разработки различных типов приложений, 
таких как веб-приложения (ASP.NET), десктопные приложения (Windows Forms, WPF), службы (WCF) и другие.

|----------------------------------------------------------------------------------------|

В CLR (Common Language Runtime) типы данных делятся на две основные категории: 

Ссылочные типы (Reference Types) хранятся в управляемой куче (managed heap) и включают:
    | class
    | interface
    | delegate
    | object
    | string

Значимые типы (Value Types) хранятся в стеке и включают:
    | Структуры (struct):
        |- Целочисленные типы: sbyte, byte, char, short, ushort, int, uint, long, ulong
        |- Типы с плавающей точкой: float, double
        |- decimal: 128-разрядный тип данных для точных финансовых расчетов
        |- bool: для логических значений
        |- Пользовательские структуры
    | Перечисления (enum)


Особенности ссылочных типов:
    | Переменные ссылочных типов содержат ссылки на фактические данные в управляемой куче.
    | Управление памятью осуществляется сборщиком мусора (Garbage Collector, GC), который автоматически освобождает память, занятую неиспользуемыми объектами.
    | Могут быть переданы по ссылке, что позволяет нескольким переменным ссылаться на один и тот же объект.

Особенности значимых типов:
    | Переменные значимых типов хранят непосредственно данные.
    | Значимые типы создаются в стеке, что делает их создание и уничтожение быстрыми.
    | Каждый экземпляр значимого типа содержит свои данные, что предотвращает изменение данных из других мест программы.


Примеры:

class Person
{
    public string Name { get; set; }
}

Person person1 = new Person { Name = "Alice" };
Person person2 = person1; // person2 ссылается на тот же объект, что и person1
person2.Name = "Bob";
Console.WriteLine(person1.Name); // Вывод: Bob


struct Point
{
    public int X { get; set; }
    public int Y { get; set; }
}

Point point1 = new Point { X = 1, Y = 2 };
Point point2 = point1; // Создается копия данных point1
point2.X = 3;
Console.WriteLine(point1.X); // Вывод: 1
